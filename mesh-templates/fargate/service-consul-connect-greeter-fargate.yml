AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy an ECS service with a Consul Connect sidecar
Parameters:
  EnvironmentName:
    Type: String
    Default: consulprod
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: greeter-fargate
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nathanpeck/greeter
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 3000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: "ConsulMeshStack-ConsulAgentRole-GF07U0QPJV53" # AS: get dynamically instead
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: ecsTaskExecutionRole
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      Volumes:
        #- Host:
            #SourcePath: /opt/consul/data
        - Name: consul-data
        #- Host:
        #    SourcePath: /var/run/docker.sock
        #  Name: consul-docker
      ContainerDefinitions:

        # AS: The Consul agent, retro fit to run as another sidecar on the task.
        # queries the ECS container metadata endpoint to get local IPV4
        - Name: consul-agent
          Image: 'consul:1.9.3'
          EntryPoint:
            - '/bin/sh'
            - '-c'
          Command:
            #- export MY_IPV4=$(curl $ECS_CONTAINER_METADATA_URI | jq '.Networks[0].IPV4Addresses[0]')
            - !Sub >
                exec consul agent -ui
                -data-dir /consul/data
                -advertise $(curl $ECS_CONTAINER_METADATA_URI | jq '.Networks[0].IPV4Addresses[0]')
                -client 0.0.0.0
                -node $(curl $ECS_CONTAINER_METADATA_URI | jq '.TaskARN')
                -retry-join "provider=aws tag_key=Name tag_value=${EnvironmentName}-consul-server"
          Memory: 128
          PortMappings:
            - ContainerPort: 8301
              Protocol: tcp
            - ContainerPort: 8301
              Protocol: udp
            - ContainerPort: 8400
              Protocol: tcp
            - ContainerPort: 8500
              Protocol: tcp
            - ContainerPort: 53
              Protocol: udp
          Essential: true
          Environment:
            # A few extra config values for the Consul agent, this enables the
            # Consul Connect features.
            - Name: CONSUL_LOCAL_CONFIG
              Value: '{"connect":{"enabled":true}}'
          MountPoints:
            - ContainerPath: /consul/data
              SourceVolume: consul-data
              ReadOnly: false
            #- ContainerPath: /var/run/docker.sock
            #  SourceVolume: consul-docker
            #  ReadOnly: true
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-daemon-consul-agent
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'consul-agent-fargate'
        
        # This is the Consul Connect sidecar. It registers itself in Consul as a proxy for
        # the service container, and accepts inbound traffic one port 8080, which it
        # then forwards to the local service container. Additionally this sidecar can be
        # used to expose remote services as localhost proxies to the service container.
        - Name: !Sub ${ServiceName}-proxy
          Image: 'consul:1.9.3'
          DependsOn:
            - ContainerName: consul-agent
              Condition: START
          EntryPoint:
            - '/bin/sh'
            - '-c'
          PortMappings:
            - ContainerPort: 8080
          Command:
            #- export MY_IPV4=$(curl $ECS_CONTAINER_METADATA_URI | jq '.Networks[0].IPV4Addresses[0]')
            - !Sub >
              exec consul connect proxy
              -register
              -service ${ServiceName}
              -register-id $(curl $ECS_CONTAINER_METADATA_URI | jq '.Networks[0].IPV4Addresses[0]')
              -http-addr $(curl $ECS_CONTAINER_METADATA_URI | jq '.Networks[0].IPV4Addresses[0]'):8500
              -listen $(curl $ECS_CONTAINER_METADATA_URI | jq '.Networks[0].IPV4Addresses[0]'):8080
              -service-addr $(curl $ECS_CONTAINER_METADATA_URI | jq '.Networks[0].IPV4Addresses[0]'):${ContainerPort}
              -upstream name:3001
              -upstream greeting:3002
          Essential: true
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: consul-connect-fargate

        # The actual service container. It should only accept inbound traffic
        # from Consul Connect, and if it needs to talk to another service it does
        # so via a localhost proxy pipe opened by the Consul Connect sidecar
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          Environment:
            - Name: PORT
              Value: !Ref 'ContainerPort'
            # The Consul Connect proxy has two upstreams which allow the process to
            # send a request to these two remote processes by using these local ports
            - Name: NAME_URL
              Value: http://localhost:3001
            - Name: GREETING_URL
              Value: http://localhost:3002
          Essential: true
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      LaunchType: 'FARGATE' # task def needs task mem/CPU, maybe require capabilities?
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}:ServiceSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetOne
            - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetTwo
      TaskDefinition: !Ref 'TaskDefinition'
